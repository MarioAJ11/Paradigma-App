package com.example.paradigmaapp.android.api

import android.util.Log
import com.example.paradigmaapp.android.podcast.Podcast
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.engine.android.Android
import io.ktor.client.request.get
import io.ktor.client.request.head // Import HEAD request
import io.ktor.client.statement.bodyAsText
import io.ktor.http.HttpStatusCode // Import HttpStatusCode
import io.ktor.http.contentLength
import io.ktor.http.contentType
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonArray
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonObject
import java.net.URLEncoder

/**
 * [ArchiveService] es responsable de la comunicaci√≥n con la API de archive.org
 * para obtener la informaci√≥n de los podcasts.
 *
 * Utiliza [io.ktor.client.HttpClient] de Ktor para realizar las peticiones de red de forma as√≠ncrona.
 * Implementa una estrategia para obtener primero una lista b√°sica de podcasts
 * y luego obtener los detalles de cada uno, utilizando una cach√© en memoria para optimizar.
 */
class ArchiveService { // Mant√©n la instancia del cliente aqu√≠

    // Instancia √∫nica del [HttpClient] configurado para Android.
    private val client = HttpClient(Android) {
        expectSuccess = true // Asegura que las respuestas HTTP con c√≥digos de error lancen una excepci√≥n.
        // No necesitas configurar expectSuccess para la petici√≥n HEAD si vas a
        // manejar los c√≥digos de estado manualmente.
        // install(HttpTimeout) { // Opcional: A√±adir timeouts para peticiones HEAD
        //     requestTimeoutMillis = 5000 // 5 segundos
        //     connectTimeoutMillis = 5000
        //     socketTimeoutMillis = 5000
        // }
    }

    internal companion object {
        // Define el n√∫mero de resultados por p√°gina para las b√∫squedas en la API.
        const val PAGE_SIZE = 100

        // Define el tiempo de espera entre peticiones a la API para evitar sobrecargar el servidor.
        const val DELAY_BETWEEN_REQUESTS_MS = 300L

        // Cach√© en memoria para almacenar los objetos [Podcast] una vez que se han recuperado sus detalles.
        // La clave del mapa es el identificador √∫nico del podcast.
        // Modificado para almacenar informaci√≥n parcial inicialmente y actualizar con detalles.
        val podcastCache = mutableMapOf<String, Podcast>()

        // URL del stream de Andaina (aj√∫stala si es diferente)
        const val ANDAINA_STREAM_URL = "http://andaina.radios.cc:8000/andaina" // <-- Verifica esta URL
    }

    /**
     * Obtiene todos los podcasts para un [creator] espec√≠fico.
     * Primero realiza una b√∫squeda para obtener los identificadores, t√≠tulo y duraci√≥n b√°sica de los podcasts,
     * y luego recupera los detalles completos (URL de audio, imagen y duraci√≥n confirmada) de cada uno de forma as√≠ncrona.
     * Utiliza la cach√© para evitar peticiones repetidas.
     *
     * @param creator El nombre del creador de los podcasts a buscar (por defecto "mario011").
     * @return Una lista de [Podcast] con todos sus detalles.
     */
    suspend fun fetchAllPodcasts(creator: String = "mario011"): List<Podcast> {
        val allPodcasts = mutableListOf<Podcast>()
        var page = 1
        var totalProcessed = 0
        var totalAvailable = Int.MAX_VALUE

        try {
            while (totalProcessed < totalAvailable) {
                val response = fetchPage(creator, page)
                val (podcastsFromPage, total) = processSearchResponse(response)
                totalAvailable = total
                Log.d("ArchiveService", "üîç Encontrados ${podcastsFromPage.size} podcasts en la p√°gina $page (Total: $totalAvailable)")

                // Primero, a√±adimos los podcasts de la b√∫squeda a la cach√© con la info b√°sica.
                // Esto es √∫til si fetchPodcastDetails falla, tenemos al menos la info inicial.
                podcastsFromPage.forEach { podcast ->
                    podcastCache.putIfAbsent(podcast.identifier, podcast)
                }

                val detailRequests = withContext(Dispatchers.IO) {
                    podcastsFromPage.map { podcast ->
                        async {
                            // Intentamos obtener de la cach√© primero
                            podcastCache[podcast.identifier]?.let { cachedPodcast ->
                                // Si ya est√° en cach√© con una URL (indicando detalles completos), √∫sala.
                                if (cachedPodcast.url.isNotEmpty()) {
                                    return@async cachedPodcast
                                }
                            }

                            // Si no est√° en cach√© o no tiene URL, obtenemos los detalles.
                            fetchPodcastDetails(podcast.identifier)?.also { detailedPodcast ->
                                // Actualizamos la cach√© con los detalles completos.
                                podcastCache[podcast.identifier] = detailedPodcast
                            } ?: podcastCache[podcast.identifier] // Si falla, devuelve la versi√≥n b√°sica de la cach√©.
                            ?: podcast // Si tampoco est√° en cach√© (raro), devuelve la versi√≥n de la b√∫squeda.
                        }
                    }
                }
                val detailedPodcasts = detailRequests.awaitAll()

                // Solo a√±ade los podcasts que obtuvimos (ya sean detallados o b√°sicos si fall√≥ la descarga de detalles)
                allPodcasts.addAll(detailedPodcasts.filterNotNull()) // Filter out any potential nulls if a request somehow returned null

                totalProcessed += podcastsFromPage.size

                if (totalProcessed < totalAvailable) {
                    page++
                    delay(DELAY_BETWEEN_REQUESTS_MS)
                }
            }
            Log.i("ArchiveService", "Descargados ${allPodcasts.size} podcasts con detalles (con cach√©)")
        } catch (e: Exception) {
            Log.e("ArchiveService", "Error general al recuperar podcasts", e)
            // En caso de error, intentar devolver lo que haya en cach√©.
            if (allPodcasts.isEmpty()) {
                return podcastCache.values.toList()
            }
        }
        return allPodcasts
    }

    /**
     * Realiza una petici√≥n GET a la API de b√∫squeda de archive.org para obtener una p√°gina de resultados.
     *
     * @param creator El nombre del creador a buscar.
     * @param page El n√∫mero de p√°gina de resultados a obtener.
     * @return El cuerpo de la respuesta JSON como un [String].
     */
    internal suspend fun fetchPage(creator: String, page: Int): String {
        val url = buildSearchUrl(creator, page)
        Log.d("ArchiveService", "Fetching page $page: $url")
        return client.get(url).bodyAsText()
    }

    /**
     * Construye la URL para la API de b√∫squeda avanzada de archive.org.
     * Solicita los campos 'identifier', 'title' y 'duration' para la lista inicial de podcasts.
     *
     * @param creator El nombre del creador.
     * @param page El n√∫mero de p√°gina.
     * @return La URL completa para la petici√≥n de b√∫squeda.
     */
    private fun buildSearchUrl(creator: String, page: Int): String {
        return "https://archive.org/advancedsearch.php?" +
                "q=${"creator:\"$creator\" AND mediatype:audio".encodeUrl()}" +
                "&fl[]=identifier,title,duration" + // Solicitamos 'duration' en la b√∫squeda inicial.
                "&rows=$PAGE_SIZE" +
                "&page=$page" +
                "&sort[]=date+desc" + // Ordena los resultados por fecha descendente.
                "&output=json"
    }

    /**
     * Procesa la respuesta JSON de la API de b√∫squeda y extrae una lista de objetos [Podcast]
     * con la informaci√≥n b√°sica (identifier, title, duration) y el n√∫mero total de resultados.
     *
     * @param jsonResponse El cuerpo de la respuesta JSON como [String].
     * @return Un [Pair] que contiene la lista de [Podcast] y el n√∫mero total de resultados.
     */
    internal fun processSearchResponse(jsonResponse: String): Pair<List<Podcast>, Int> {
        val json = Json.Default.parseToJsonElement(jsonResponse).jsonObject
        val response = json["response"]?.jsonObject ?: return Pair(emptyList(), 0)
        val totalResults = response["numFound"]?.toString()?.toIntOrNull() ?: 0
        val docs = response["docs"]?.jsonArray ?: return Pair(emptyList(), totalResults)

        val podcasts = docs.mapNotNull { element ->
            try {
                val jsonObject = element.jsonObject
                val identifier = jsonObject["identifier"]?.toString()?.trim('"') ?: ""
                val rawTitle = jsonObject["title"]?.toString()?.trim('"') ?: "Sin t√≠tulo"
                // Intentamos obtener la duraci√≥n de la respuesta de b√∫squeda
                val rawDuration = jsonObject["duration"]?.toString()?.trim('"')

                // Creamos un objeto Podcast con la informaci√≥n inicial, incluyendo la duraci√≥n si est√° disponible.
                Podcast(
                    title = rawTitle,
                    url = "", // La URL del audio se obtiene en los detalles.
                    imageUrl = null, // La URL de la imagen se obtiene en los detalles.
                    duration = formatDuration(rawDuration), // Formateamos la duraci√≥n encontrada aqu√≠.
                    identifier = identifier
                )
            } catch (e: Exception) {
                Log.e("ArchiveService", "Error processing search result item: $e", e)
                null // Ignora este elemento si falla su procesamiento.
            }
        }
        return Pair(podcasts, totalResults)
    }

    /**
     * Realiza una petici√≥n a la API de metadatos para obtener los detalles completos
     * de un podcast espec√≠fico utilizando su [identifier].
     *
     * @param identifier El identificador √∫nico del podcast.
     * @return Un objeto [Podcast] con todos sus detalles (actualizado) o null si la petici√≥n falla o no se encuentra audio.
     */
    private suspend fun fetchPodcastDetails(identifier: String): Podcast? {
        val url = "https://archive.org/metadata/$identifier"
        Log.d("ArchiveService", "Fetching details for $identifier...")
        return try {
            val response = client.get(url).body<String>()
            processMetadataResponse(response, identifier)
        } catch (e: Exception) {
            Log.e("ArchiveService", "Error al obtener metadatos de $identifier", e)
            null // Devuelve null si falla la petici√≥n de metadatos.
        }
    }

    /**
     * Procesa la respuesta JSON de la API de metadatos y actualiza la informaci√≥n
     * de un objeto [Podcast] existente (o crea uno si no est√° en cach√©)
     * con la URL del audio, la URL de la imagen de portada y la duraci√≥n confirmada.
     *
     * @param jsonResponse El cuerpo de la respuesta JSON como [String].
     * @param identifier El identificador del podcast.
     * @return Un objeto [Podcast] actualizado con detalles o null si no se puede procesar (falta audio URL).
     */
    internal fun processMetadataResponse(jsonResponse: String, identifier: String): Podcast? {
        val json = Json.Default.parseToJsonElement(jsonResponse).jsonObject
        val metadata = json["metadata"]?.jsonObject
        val filesElement = json["files"]
        val files = if (filesElement is JsonElement) {
            filesElement.jsonArray
        } else {
            null
        }

        if (metadata == null) {
            Log.w("ArchiveService", "Campo 'metadata' nulo o no existe para $identifier")
            return null
        }

        if (files == null) {
            Log.w("ArchiveService", "El campo 'files' no es un JsonArray o no existe para $identifier")
            // A veces los metadatos existen pero no hay archivos. Podemos intentar crear un podcast
            // b√°sico si la cach√© ya tiene uno, aunque no tenga URL de audio.
            return podcastCache[identifier]?.copy(
                title = metadata["title"]?.toString()?.trim('"') ?: "Sin t√≠tulo",
                imageUrl = findCoverImage(identifier), // Intentar encontrar imagen aunque no haya audio
                // Mantenemos la duraci√≥n que ya ten√≠amos si exist√≠a.
                duration = podcastCache[identifier]?.duration ?: formatDuration(metadata["length"]?.toString()?.trim('"') ?: metadata["duration"]?.toString()?.trim('"'))
            ) // Si no est√° en cach√©, no podemos crear uno sin audio URL.
        }

        val rawTitle = metadata["title"]?.toString()?.trim('"') ?: "Sin t√≠tulo"
        // Preferimos la duraci√≥n de 'length' o 'duration' en los metadatos si est√°n presentes.
        // Si no, mantenemos la que pudimos obtener en la b√∫squeda.
        val durationFromMetadata = metadata["length"]?.toString()?.trim('"') ?: metadata["duration"]?.toString()?.trim('"')

        val audioUrl = findAudioUrlFromMetadata(files, identifier)
        if (audioUrl == null) {
            Log.w("ArchiveService", "No se encontr√≥ archivo de audio en metadatos para $identifier")
            // Si no hay archivo de audio, no podemos reproducir, consideramos que no es un podcast v√°lido para detalles completos.
            // Podr√≠amos devolver la versi√≥n b√°sica de la cach√© si existe, pero null indica fallo en obtener detalles.
            return null
        }

        val imageUrl = findCoverImage(identifier)

        // Buscamos si ya existe una instancia en la cach√© para actualizarla,
        // o creamos una nueva si no (deber√≠a existir por la l√≥gica de fetchAllPodcasts).
        return podcastCache[identifier]?.copy(
            title = rawTitle,
            url = audioUrl,
            imageUrl = imageUrl,
            // Usamos la duraci√≥n de los metadatos si est√° disponible, de lo contrario, la de la b√∫squeda inicial.
            duration = formatDuration(durationFromMetadata ?: podcastCache[identifier]?.duration?.let { if (it == "--:--") null else it } )
        ) ?: Podcast( // Si no existe en la cach√© (raro), creamos una nueva instancia.
            title = rawTitle,
            url = audioUrl,
            imageUrl = imageUrl,
            duration = formatDuration(durationFromMetadata ?: ""), // Si no est√° en metadata, usamos vac√≠o y formatDuration lo manejar√°
            identifier = identifier
        ).also { podcastCache[identifier] = it } // Asegurarnos de que la nueva instancia tambi√©n se cachea.
    }

    /**
     * Busca en la lista de archivos del metadato la URL del primer archivo de audio encontrado
     * con extensiones comunes como .mp3, .ogg o .m4a.
     *
     * @param files El [kotlinx.serialization.json.JsonArray] que contiene la informaci√≥n de los archivos.
     * @param identifier El identificador del item para construir la URL de descarga.
     * @return La URL del archivo de audio o null si no se encuentra ninguno.
     */
    private fun findAudioUrlFromMetadata(files: JsonArray, identifier: String): String? {
        return files.firstOrNull {
            val format = it.jsonObject["format"]?.toString()?.trim('"') ?: ""
            format.contains("audio", ignoreCase = true) ||
                    format.contains("mp3", ignoreCase = true) ||
                    format.contains("ogg", ignoreCase = true) ||
                    format.contains("m4a", ignoreCase = true) ||
                    format.contains("sound", ignoreCase = true) // A√±adir otros formatos comunes si es necesario
        }?.jsonObject?.get("name")?.toString()?.trim('"')?.let { fileName ->
            "https://archive.org/download/$identifier/$fileName"
        }
    }

    /**
     * Intenta construir la URL de la imagen de portada del podcast utilizando convenciones comunes
     * de nombres de archivo en archive.org.
     *
     * @param identifier El identificador del item.
     * @return La URL de la imagen de portada o null si no se puede construir.
     */
    private fun findCoverImage(identifier: String): String? {
        val baseUrl = "https://archive.org/download/$identifier"
        // Nombres comunes de im√°genes de portada en archive.org
        val possibleCoverNames = listOf(
            "${identifier}_thumb.jpg", // Miniatura generada autom√°ticamente
            "${identifier}.jpg",        // Imagen principal con el mismo nombre del item
            "cover.jpg",              // Nombre com√∫n de archivo de portada
            "thumb.jpg",              // Otro nombre com√∫n para miniaturas
            "album_art.jpg",          // Nombre com√∫n para arte de √°lbum
            "folder.jpg"              // Otro nombre com√∫n (menos probable para podcasts)
        )
        // Simplemente construimos las URLs. La verificaci√≥n de si existen se har√≠a
        // idealmente con una petici√≥n HEAD, pero por simplicidad, asumimos
        // que si una de estas URLs existe, es la imagen.
        return possibleCoverNames.firstOrNull { name ->
            // Podr√≠as a√±adir l√≥gica aqu√≠ para verificar la existencia de la imagen si es crucial,
            // pero generalmente, si el item tiene una portada, usa una de estas convenciones.
            true // Simplemente usa el primer nombre posible para construir la URL
        }?.let { coverName ->
            "$baseUrl/${coverName.encodeUrl()}" // Codificar el nombre del archivo por si acaso
        }
    }

    /**
     * Formatea la duraci√≥n del podcast de segundos (String o Float/Double) a un formato MM:SS o HH:MM:SS.
     * Maneja casos en los que la duraci√≥n no es v√°lida o est√° ausente.
     * Intenta parsear como Int, luego como Double si falla.
     *
     * @param rawDuration La duraci√≥n como [String], puede ser un entero o un punto flotante.
     * @return La duraci√≥n formateada como MM:SS o HH:MM:SS, o "--:--" si no es v√°lida.
     */
    private fun formatDuration(rawDuration: String?): String {
        if (rawDuration.isNullOrBlank()) return "--:--"
        return try {
            val secondsFloat = rawDuration.toFloat() // Intenta como float primero por si acaso
            if (secondsFloat.isNaN() || secondsFloat.isInfinite() || secondsFloat < 0) return "--:--"
            val totalSeconds = secondsFloat.toLong()

            val hours = totalSeconds / 3600
            val minutes = (totalSeconds % 3600) / 60
            val remainingSeconds = totalSeconds % 60

            if (hours > 0) {
                String.format("%02d:%02d:%02d", hours, minutes, remainingSeconds)
            } else {
                String.format("%02d:%02d", minutes, remainingSeconds)
            }
        } catch (e: NumberFormatException) {
            Log.w("ArchiveService", "Cannot parse duration '$rawDuration' as number: ${e.message}")
            "--:--" // Valor por defecto en caso de error de formato.
        } catch (e: Exception) {
            Log.e("ArchiveService", "Error formatting duration '$rawDuration': ${e.message}")
            "--:--"
        }
    }


    /**
     * Extensi√≥n de la clase [String] para codificar la URL de forma segura en UTF-8.
     * Utilizado para construir la query de b√∫squeda y URLs de archivos.
     *
     * @return La cadena codificada para ser utilizada en una URL.
     */
    private fun String.encodeUrl(): String {
        return URLEncoder.encode(this, "UTF-8")
    }
}